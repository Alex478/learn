## 2 курс - структуры данных



## скобочная последовательность
B = list(input()) # список скобок
def bracket(stroka):
    # проверяет скобочную последовательность (весь список)
     #   если скобочная последовтаельность неправильная, выводит
      #  номер первой неверной закрывающей скобки 
    stack = []
    idx = []
    k=0
    for i in stroka:
        k += 1
        if i in ('(','[','{'):# для откр.скобки
            stack.append(i)
            idx.append(k)
        else:                 # для закрыв.скобки
            if i not in (')',']','}'):
                continue
            elif len(stack) == 0:
                return print(k)
            elif (stack[-1] in ("(") and i in (")")) or ( stack[-1] in ('[') and i in (']')) or ( stack[-1] in ('{') and i in ('}')):
                stack.pop()
                idx.pop()
    if len(stack) == 0:
        return print('Success')
    pos = stack.pop()
    return print(idx[0])
bracket(B)




# высота дерева
n = int(input())
B = list(map(int, input().split()))
m_height = [None] * n # массив для значений высоты
def get_height(p): 
    # p- значение/родитель
    if m_height[p] is not None: # если уже посчитано/есть значение
        return m_height[p] 
    if p == -1: # если значение =-1 это корень 
        return 1 # вернуть 1
    h = 1 + get_height(B[p]) #
    m_height[p] = h # высота 
    return h
mx = 0
for i in B: # поиск высоты для каждого элемента вх.списка
    h = get_height(i)
    mx = max(h, mx) #
print(mx)




# симуляция обработки сетевых пакетов
import bisect
size, n = map(int, input().split())
M_bufer = [] # массив для времени выхода
for i in range(n):
    time_in, time_size = map(int, input().split())
    del M_bufer[0:bisect.bisect(M_bufer, time_in)]# очистить буфер/удалить все пакеты с меньшим временем
    if len(M_bufer) < size: # если буфер не полный 
        if M_bufer: # если в буфере что то есть, то сравниваем время
            otvet = max(M_bufer[-1], time_in)# if M_bufer 
        else:
            otvet = time_in
        print(otvet)
        M_bufer.append(otvet + time_size)
    else: # если буфер полный
        print(-1)




## стек с поддержкой максимума
Stack = [] #
q = int(input())
max_stack = 0 # максим элемент
for i in range(q): 
    elem = input() 
    if elem.startswith("push"): # добавляем элемент
        a = int(elem.split("push ")[1]) # выделяем число из введенной строки
        w = max(max_stack, a)       # выбираем максимум из элемента и сохраненного числа
        Stack.append(w)
        max_stack = w
    elif elem.startswith("pop"): # удаляем последний добавленный элемент
        Stack.pop()
        if len(Stack) == 0: # если пуст стек то нуль
            max_stack = 0
        else:
            max_stack = Stack[-1] # либо равен последнему элементу в стеке
    elif elem.startswith("max"): # если мах 
        print(Stack[-1])      # то печатаем последний элемент
 
 
 
## максимум в скользящем окне
from collections import deque 
n = int(input())
A =list(map(int,input().split())) 
k = int(input())
Bufer = deque() 
for i in range(k): # для элементов первого окна
    while Bufer and A[i] >= A[Bufer[-1]] : 
        Bufer.pop() 
    Bufer.append(i) # добавляет индекс
for i in range(k, n): # для следующих окон
    print(str(A[Bufer[0]]) + " ", end = "") 
    while Bufer and Bufer[0] <= i-k: 
        Bufer.popleft()  # удаление элемента слева от i
    while Bufer and A[i] >= A[Bufer[-1]] : 
        Bufer.pop() 
    Bufer.append(i) 
print(str(A[Bufer[0]]))



## построение кучи
n = int(input())
S = list(map(int,input().split()))
#import heapq # проверка сортировки модулем heapq
#S1 = list(map(int,input().split()))
#heapq.heapify(S1) # сортировка списка кучей
#print(S1) #
Otvet = []

def siftDown(i):# Просеивание элемента с индексом i вниз
    left = 2 * i + 1
    right = 2 * i + 2
    if left >= len(S):# если элемент и так уже внизу, то конец
        return
    min_idx = left
    if right < len(S) and S[right] < S[left]:
        min_idx = right
    if S[i] > S[min_idx]:
        S[i], S[min_idx] = S[min_idx], S[i]
        Otvet.append((i, min_idx)) 
    siftDown(min_idx)

for i in range(n//2,-1,-1):
    siftDown(i)
for j in range(n-1):# проверяем каждый элемент просеиванием вниз
    siftDown(j)
        
print(len(Otvet))
for i in Otvet:
    print(i[0],i[1]) 
    
# паралельная обработка сетевых пакетов 
import heapq

def process(n, S):
    Otvet = []
    processors = [(0, proc) for proc in range(n)]# в массиве - элемент состояит из(время обработки(утапливается), процессор)
    heapq.heapify(processors) # сделать мин кучу, сначала по первому элементу, потом по второму
    for elem in S:
        time, num_proc = heapq.heappop(processors)# убрали наименьший элемент из кучи
        Otvet.append((num_proc, time))
        heapq.heappush(processors, (time + elem, num_proc)) # к новому элементу добавляем время обработки предыдущего
    return Otvet 
    
n, m = map(int, input().split())
S = list(map(int, input().split()))
Otvet = process(n, S)

for i in Otvet:
    print(i[0], i[1])
### не мое решение    -
from heapq import heappush, heappop

H = [(0, cpu) for cpu in range(int(input().split()[0]))]
for t in map(int, input().split()):
    start, cpu = heappop(H)
    print(cpu, start)
    heappush(H, (start + t, cpu))
###   


## объединение таблиц
import sys
def Find(i): # найти родителя элемента
    if i != parent[i]: #  поиск родителя/элемента со сжатием путей
        parent[i] = Find(parent[i])
    return parent[i]

def Union(i, j): # объединить множества/таблицы/ т.д.
    i_id, j_id = Find(i), Find(j)
    if i_id == j_id:
        parent[0] = max(parent[0], rank[i_id])
        return parent[0]
    if rank[i_id] > rank[j_id]:
        parent[j_id] = i_id # изменение родителя у элемента
        rank[i_id] += rank[j_id]   # увеличение высоты дерева/ранга родителя
        parent[0] = max(parent[0], rank[i_id])  # поиск максимальной высоты дерева/ранга
        return parent[0]
    else:
        parent[i_id] = j_id
        rank[j_id] += rank[i_id]
        parent[0] = max(parent[0], rank[j_id])  # поиск максимальной высоты дерева/ранга
        return parent[0]
    
n, m = map(int, input().split())
rank = [0] + list(map(int, input().split())) # сделаем начиная с 0 , чтобы было проще отслеживать номера элементов
parent = [0] # в нулевом будем хранить максимальный элемент

for i in range(1, n + 1):
    parent.append(i) # добавка новых элементов в массив
    if parent[0] < rank[i-1]: # поиск максимальной высоты дерева среди начальных элементов
        parent[0] = rank[i-1]
        
for line in sys.stdin: # для каждой пары элементов 
    x, y = map(int, line.split()) 
    print(Union(x, y))    
    
### ### автоматический анализ программ
import sys

n, e, d = map(int, input().split())
parent = [0]
for i in range(1, n + 1): # добавим n элементов в массив
    parent.append(i)
q = 1    
def Find(x): # найти элемент
    if x != parent[x]: #  поиск родителя/элемента со сжатием путей
        parent[x] = Find(parent[x])
    return parent[x]

def F_line(i, j, e, line):
    global q
    if e == 0 and d == 0:
        return q
    elif line < e:
        if i < j:
            parent[j] = Find(i) # присваиваем самого первого родителя мень.элемента
            return q
    else:
        if Find(i) == Find(j):
            q = 0
            return q
for line in range( e + d):
    i, j = map(int, input().split())
    if F_line(i, j, e, line) == 0:
        break
print(q)


###### телефонная книга - хэш-таблица
n= int(input())
Tel_book = {} # организуем словарь

def add_number(elem): # добавить элемент в тел.книгу
    # присвоить по индексу=elem[1]
    Tel_book[elem[1]] = elem[2]

def del_number(elem): # удалить элемент
    if elem[1] in Tel_book:
        del Tel_book[elem[1]]
        
def find_number(elem): # найти элемент
    if elem[1] in Tel_book:
        print(Tel_book[elem[1]])
    else:
        print('not found')
        
#### цепочки         
for i in range(n):
    elem= input()
    if elem.startswith('add'):
        elem = elem.split(' ')
        add_number(elem)
    elif elem.startswith('del'):
        elem = elem.split(' ')
        del_number(elem)
    elif elem.startswith('find'):
        elem = elem.split(' ')
        find_number(elem)
        
        
        
        
## Хеширование цепочками 
## признаюсь - это решение почти списал. у своего не смог выяснить проблему вывода ответа на экран
# свое (если в задаче надо выводить !значения словаря и состоящие из одного элемента и из нескольких, то выводит либо слитно либо вместе)
"""
n= int(input())
m = int(input())
Tel_book = {}
def f_hash(A): # вычисляем хэш индекс
    idx_hash = 0 # хэш индекс
    for i in range(len(A)):
        idx_hash += (ord(A[i]) * 263**i)
    idx_hash = idx_hash % 1000000007 % 5
    return idx_hash # хэш индекс
    
def add_number(elem): # добавить элемент в тел.книгу
    q = f_hash(elem[1]) #хэш 
    if q in Tel_book:
        ww = Tel_book[q]
        for j in ww:
            if j == elem[1]:
                return
        Tel_book[q] = elem[1], str(Tel_book[q])
    else:
        Tel_book[q] = elem[1]

def del_number(elem): # удалить элемент
    for t in Tel_book: # для каждого элемента в словаре
        q = Tel_book[t]
        for j in q:
            if j == elem[1]:
                del Tel_book[t]
                return # а надо удалить часть значения а не весь элем

def find_number(elem): # найти элемент
    Values_name = Tel_book.values() # список значений словаря
    for i in Values_name:
        if elem[1] in i:
            return print('yes')
    print('no') 
    
def chesk_i(elem): # вывести список элемента если есть 
    if int(elem[1]) in Tel_book: # если элемент есть в словаре, то выводим значение из словаря
        LIST = Tel_book[int(elem[1])]
        if len(LIST)>1:
            print(' '.join(Tel_book[int(elem[1])])) # если значение словаря состоит из нескольких элементов - то выводит успешно
                                                    # если значение словаря состоит из одного элемента - выведет значение с пробелами
                                                    # не смог решить ))
    else:
        print()
for i in range(m):
    elem= input().split(' ')
    if elem[0].startswith('add'):
        add_number(elem)
    elif elem[0].startswith('del'):
        del_number(elem)
    elif elem[0].startswith('find'):
        find_number(elem)
    elif elem[0].startswith('che'):
        chesk_i(elem)
        """
"""
import sys
from functools import lru_cache

@lru_cache(maxsize=None)
def x_powered( power):
    if power == 0:
        return 1
    if power == 1:
        return x
    else:
        return x_powered(power - 1) * x

def h(string): # посчитать хэш
    result = 0
    for i, ch in enumerate(string):
        result += ((ord(ch) * x_powered(i)) % p)
    return (result % p) % m

def put( string):
    if not find(string):
        map[h(string)].insert(0, string)
def find( string):
    for i in map[h(string)]:
        if string == i:
            return True
    return False

def remove( string):
    lst = map[h(string)]
    for i, elem in enumerate(lst):
        if string == elem:
            del lst[i]
            return True
    return False

def get_list(i):
    return map[i]

m = int(next(sys.stdin))
n = int(next(sys.stdin))
p = 1000000007
x = 263
map = {i: [] for i in range(m)}

for i in range(n):
    command = next(sys.stdin)
    if command.startswith('add'):
        _, string = command.split()
        put(string)
    elif command.startswith('find'):
        _, string = command.split()
        if find(string):
            print('yes')
        else:
            print('no')
    elif command.startswith('del'):
        _, string = command.split()
        remove(string)
    elif command.startswith('check'):
        _, i = command.split()
        lst = get_list(int(i))
        if lst:
            print(" ".join(lst))
        else:
            print()
            
            
###    Поиск образца в тексте - алгоритм Робина Карпа

def hash_i(s): # вычисляем хэш индекс
    idx_hash = 0 # хэш индекс
    for i in range(len(s)):
        idx_hash += ord(s[i])# % 1000000007 % 5 # а может убрать  % 1000000007 % 5 - ошибка на 47 задаче
    return idx_hash # хэш индекс

def check(pattern, stroka, pos): #  сравнение по-символьно образца и куска текста
    for j in range(len_pattern):
        if pattern[j] != stroka[j]:
            return
    return print(pos, end=' ')
    
def find_hash(idx, pattern, st): # поиск образца в строке
    global hash_text
    hash_text = hash_text - ord(string[idx - 1]) + ord(string[idx + len_pattern-1]) # хэш части
    if hash_text == hash_pat and pattern == st:
        print(idx, end=' ')

pattern = input() # образец
string = input() # строка 
len_pattern = len(pattern) # длина образца
len_string = len(string) # длина строки

hash_pat = hash_i(pattern) # хэш образца
hash_text = hash_i(string[0:len_pattern]) # хэш начала строки

if hash_pat == hash_text: # проверяем образец и начало строки
    check(pattern, string[0:len_pattern], 0)

for i in range(1, len_string - len_pattern + 1): # 
    find_hash(i, pattern, string[i:i+len_pattern])    
    

### 
