
#_________задача1 Фибоначчи_________

def fib(n):
    f1=0
    f2=1
    for __ in range(n):
        f1,f2=f2,f1+f2
    return f1
        
def main():
    n = 5
#    n = int(input())
    print(fib(n))

if __name__ == "__main__":
    main()
#  _______задача 2________
def fib_digit(n):
    #найти последнюю цифру в n-числе Фибоначчи
    a=0
    b=1
    for i in range(n):
        a,b=b%10,(a+b)%10
    return a%10
#__задача 3_______
def fib_mod(n, m):
    P=[0,1]
    p0=0
    p1=1
    for i in range(2,m**2+1):
        p0, p1 = p1, (p0 + p1)%m
        P.append(p1%m)
        if i > 3:
            if P[i-1] == P[0] and P[i] == P[1]:
                break
    if m == 1:
        x = 1
    elif m > 1:
        x = P[(n%(len(P)-2))]   
    return x  
fib_mod(10,2)


# наибольший общий делитель
def gcd(a, b):
   # поиск наибольшего общего делителя
    if a == 0:
        return b
    elif b == 0:
        return a
    elif a >= b:
        return gcd(a % b, b)
    elif b >= a:
        return gcd(a, b % a)
def main():
    a, b = map(int, input().split())
    print(gcd(a, b))

if __name__ == "__main__":
    main()

# Жадные алгоритмы
# задача об отрезках

S = [list(map(int, input().split())) for _ in range(int(input()))]
S.sort(key=lambda x: x[1]) # сортировка списка 
S_perv = S[0]
m=1
S_list =[]
S_list.append(S_perv[1])
for i in S[1:]:
    if i[0] > S_perv[1]:
        S_perv = i
        S_list.append(S_perv[1])
        m+=1
print(m)
print(' '.join(map(str,S_list)))

#задача о рюкзаке

n, W = map(int, input().split())
S = [list(map(int, input().split())) for _ in range(n)]
S.sort(key = lambda x: x[0] / x[1] , reverse = True)
C = 0
for i in S:
    if W >= i[1]:
        C = C + i[0]
        W = W - i[1]
    elif W < i[1]:
        C = C + (i[0]/i[1]*W)
        W = W -i[1]
    elif W <= 0:
        break
print(round(C,3)) 

# разложение числа на слагаемые
def calculation(n):
    terms = []
    a, b = 1, n - 1
    while b > a:
        terms.append(a)
        a += 1
        b = b - a
    terms.append(n-sum(terms))
    return terms
def main():
    n = int(input())
    result = calculation(n)
    print(len(result))
    print(' '.join(map(str, result)))
if __name__ == "__main__":
    main()
    
# 2 вариант
n = int(input())
k = int(((1 + 8*n)**0.5-1)/2)
print(k)
print(*[i for i in range(1, k)], end=' ')
su = (k-1)*k//2
if su < n:
   print(n-su)
   
# 3 вариант
S = []
n = int(input())
i = 1
while n - i > i:
    n -= i
    S.append(i)
    i += 1
else:
    S.append(n)
print(len(S))
print(' '.join(map(str, S)))

#  


import heapq  # модуль для работы с мин. кучей из стандартной библиотеки Python
from collections import Counter  # словарь в котором для каждого объекта поддерживается счетчик
from collections import namedtuple

class Node(namedtuple("Node", ["left", "right"])):  # класс для ветвей дерева - внутренних узлов; у них есть потомки
    def walk(self, code, acc):
        # чтобы обойти дерево нам нужно:
        self.left.walk(code, acc + "0")  # пойти в левого потомка, добавив к префиксу "0"
        self.right.walk(code, acc + "1")  # затем пойти в правого потомка, добавив к префиксу "1"

class Leaf(namedtuple("Leaf", ["char"])):  # класс для листьев дерева, у него нет потомков, но есть значение символа
    def walk(self, code, acc):
        # потомков у листа нет, по этому для значения мы запишем построенный код для данного символа
        code[self.char] = acc or "0"  # если строка длиной 1 то acc = "", для этого случая установим значение acc = "0"

def huffman_encode(s):  # функция кодирования строки в коды Хаффмана
    h = []  # инициализируем очередь с приоритетами
    for ch, freq in Counter(s).items(): # постоим очередь с помощью цикла, добавив счетчик, уникальный для всех листьев
        h.append((freq, len(h), Leaf(ch)))  # очередь будет представлена частотой символа, счетчиком и самим символом
    heapq.heapify(h)  # построим очередь с приоритетами
    count = len(h) # инициализируем значение счетчика длиной очереди
    while len(h) > 1:  # пока в очереди есть хотя бы 2 элемента
        freq1, _count1, left = heapq.heappop(h)  # вытащим элемент с минимальной частотой - левый узел
        freq2, _count2, right = heapq.heappop(h)  # вытащим следующий элемент с минимальной частотой - правый узел
        # поместим в очередь новый элемент, у которого частота равна суме частот вытащенных элементов
        heapq.heappush(h, (freq1 + freq2, count, Node(left, right))) # добавим новый внутренний узел у которого
                                                                     # потомки left и right соответственно
        count += 1  # инкрементируем значение счетчика при добавлении нового элемента дерева
    code = {}  # инициализируем словарь кодов символов
    if h:  # если строка пустая, то очередь будет пустая и обходить нечего
        [(_freq, _count, root)] = h  # в очереди 1 элемент, приоритет которого не важен, а сам элемент - корень дерева
        root.walk(code, "")  # обойдем дерева от корня и заполним словарь для получения кодирования Хаффмана
    return code  # возвращаем словарь символов и соответствующих им кодов

def main():
    s = input()  # читаем строку длиной  до 10**4
    code = huffman_encode(s)  # кодируем строку
    encoded = "".join(code[ch] for ch in s)  # отобразим закодированную версию, отобразив каждый символ
                                             # в соответствующий код и конкатенируем результат
    print(len(code), len(encoded))  # выведем число символов и длину закодированной строки
    for ch in sorted(code): # обойдем символы в словаре в алфавитном порядке с помощью функции sorted()
        print("{}: {}".format(ch, code[ch]))  # выведем символ и соответствующий ему код
    print(encoded)  # выведем закодированную строку

if __name__ == "__main__":
    main()
    
def huffman_decode(encoded, code):  # функция декодирования исходной строки по кодам Хаффмана
    sx =[]  # инициализируем массив символов раскодированной строки
    enc_ch = ""  # инициализируем значение закодированного символа
    for ch in encoded:  # обойдем закодированную строку по символам
        enc_ch += ch  # добавим текущий символ к строке закодированного символа
        for dec_ch in code:  # постараемся найти закодированный символ в словаре кодов
            if code.get(dec_ch) == enc_ch:  # если закодированный символ найден,
                sx.append(dec_ch)  # добавим значение раскодированного символа к массиву раскодированной строки
                enc_ch = ""  # обнулим значение закодированного символа
                break
    return "".join(sx)  # вернем значение раскодированной строки


def test(n_iter=100):  # добавим тест для проверки алгоритма
    import random  # нам понадобится генератор случайных чисел
    import string  # модуль для работы со строками, чтобы получить значения символов по их коду

    # сгененрируем строку из ascii-символов
    for i in range(n_iter):  # тест включает краевые случаи с пустой строкой и строкой из 1 символа
        length = random.randint(0, 32)  # сгеренируем код символа
        s = "".join(random.choice(string.ascii_letters) for _ in range(length)) # получим символ по коду и добавим к строке
        code = huffman_encode(s)  # выполним кодирование строки
        encoded = "".join(code[ch] for ch in s)  # получим закодированную строку
        assert huffman_decode(encoded, code) == s  # раскодируем строку и сравним ее с исходной строкой

#свое решение не доделанное кодирование по хаффману по дереву 
s = input()
s_key=[]
s_n=[]
s_1=[]
for i in range(len(s)): # создать словарь - буква/частота
    if s[i] not in s_key:
        b_1=s.count(s[i])
        s_key.append(s[i])
        s_n.append(b_1)
        s_1 = list(zip(s_key,s_n))
s_1.sort(key=lambda elem: elem[1]) # отсортировать словарь по весу
while len(s_1) >= 2:
    k_1 = (([s_1[0][0], s_1[1][0]]),(int(s_1[0][1]) + int(s_1[1][1])))
    s_1.append(k_1)
    del s_1[:2]
    s_1.sort(key=lambda elem: elem[1])
    s_1[0]
haff = []
def fn_cod(st,elem):
    if type(elem) == str:
        haff.append((elem,st))
        return
    fn_cod(st+'0', elem[0])
    fn_cod(st+'1', elem[1])
for i in s_1:
    fn_cod(s_1,i)

# задача  декодирование по Каффману

a,b = map(int, input().split())
S = [list(map(str, input().split(': '))) for _ in range(a)]
text = input()
S_0 = []
S_1 = []
for i in S:  #разделить на списки- в 1 значения начнаются с 0, в 2 с 1
    if i[1].startswith('0'):
        S_0.append(i)
    elif i[1].startswith('1'):
        S_1.append(i)
text_0 = []
k = 1
while len(text)>= 1:
    el = text[:k]
    if el.startswith('0'): #    if el=0,# то искать в 1
        for i in range(len(S_0)):
            if el == S_0[i][1]:
                text_0.append(S_0[i][0])
                text = text[k:]
                k=0
        k += 1
    elif el.startswith('1'):#    elif # то искать в 2
        for i in range(len(S_1)):
            if el == S_1[i][1]:
                text_0.append(S_1[i][0])
                text = text[k:]
                k=0    
        k += 1
print(''.join(text_0))

# кусок кода по каффману для проверки не мое
s = input()
L = {}
for i in s:
    if i in L:
        L[i][0] += 1
    else:
        L[i] = [1, '']

k = len(L)
L1 = sorted(L)
A = []
for i in L1:
    A += [[L[i], i]]
A.sort(reverse=True)

while len(A) > 1:
    for i in range(len(A[-1][0]) - 1):
        A[-1][0][i+1] = '0' + A[-1][0][i+1]
    for i in range(len(A[-2][0]) - 1):
        A[-2][0][i+1] = '1' + A[-2][0][i+1]
    A[-2][0][0] += A[-1][0][0]
    del A[-1][0][0]
    A[-2][0] += A[-1][0]
    A[-2][1] += A[-1][1]
    del A[-1]
    A.sort(reverse=True)

# итоговый - теперь ошибка на 3 тесте - не доделано
# import sys
# sys.stdin.readline() # добавление нового элемента
n = int(input())
kucha = [] # создать список
if n > 0:
    for j in range(n):
        elem = input()
        if elem.startswith('Insert'):
            item = int(elem.split('Insert ')[1])
            kucha.append(item)# добавить элемент в список
            i = len(kucha) - 1
            while i > 1 and kucha[(i-1) // 2] < item:
                kucha[i], kucha[(i-1) // 2] = kucha[(i-1) // 2], kucha[i]
                i = (i-1) // 2
#            if i == 1 and kucha[0] < kucha[1]:
#                kucha[0], kucha[1] = kucha[1], kucha[0]
        elif elem.startswith('ExtractMax'):
            print(kucha[0])
            kucha[0], kucha[len(kucha)-1] = kucha[len(kucha)-1], kucha[0]
            kucha.remove(kucha[len(kucha) - 1])
            j=0
            while 2 * j + 2 < len(kucha) and kucha[j] < max(kucha[2 * j + 1], kucha[2 * j + 2]):
                if kucha[2 * j + 1] > kucha[2 * j + 2]:
                    kucha[j],kucha[2 * j + 1] = kucha[2 * j + 1],kucha[j]
                    j = (j * 2) + 1
                elif kucha[2 * j+1] <= kucha[2 * j + 2]:
                    kucha[j], kucha[2 * j + 2]=kucha[2 * j + 2],kucha[j]
                    j = (j * 2) + 2
            if len(kucha) == 2 and kucha[0] < kucha[1]:
                kucha[0], kucha[1] = kucha[1], kucha[0]
# списал не дождался своего решение - 2 недели))
import heapq
class Heap:
    def __init__(self):
        self._queue = []
        self._index = 0
    def push(self, item, priority):
        heapq.heappush(self._queue, (-priority, self._index, item))
        self._index += 1
    def pop(self):
            return heapq.heappop(self._queue)[-1]
def main():
    n = int(input())
    pq = Heap()
    maxs = []
    for _ in range(n):
        command = input()
        if command.startswith('Insert'):
            _, priority = command.split()
            priority = int(priority)
            pq.push(priority, priority)
        else:
            maxs.append(pq.pop())

    for m in maxs:
        print(m)
if __name__ == '__main__':
    main()
#    

# задача сортировка слиянием
    
n = int(input())
A = list(map(int,input().split()))
kol=0
A_resul = [0] * n
def merge_kol(A,A_resul, l, r): # считает инверсии
    kol = 0
    if l < r:
        middle = (l + r)//2
        kol = merge_kol(A, A_resul, l, middle)
        kol += merge_kol(A, A_resul, middle+1, r)
        kol += merge_sort(A, A_resul, l, middle, r)
    return kol
def merge_sort(A, A_resul, l, middle, r):
    i = l
    j = middle + 1
    k = l
    kol = 0
    while i <=middle and j <=r: 
        if A[i] <=A[j]: 
            A_resul[k] =A[i] 
            k +=1
            i +=1
        else:    # Произойдет инверсия. 
            A_resul[k] =A[j] 
            kol +=(middle - i +1) 
            k +=1
            j +=1
    while i <= middle: 
        A_resul[k] = A[i] 
        k +=1
        i +=1
    while j <= r: 
        A_resul[k] = A[j] 
        k +=1
        j +=1
    for el in range(l, r +1): 
        A[el] =A_resul[el] 
    return kol
print(merge_kol(A, A_resul, 0 , n-1))

# вариант не мой
def merge_sort_inversions(arr):
    if len(arr) == 1:
        return arr, 0
    a, ai = merge_sort_inversions(arr[:len(arr) >> 1])
    b, bi = merge_sort_inversions(arr[len(arr) >> 1:])
    c = []
    i, j, r = [0] * 3
    r += ai + bi
    while i < len(a) and j < len(b):
        if a[i] <= b[j]:
            c.append(a[i])
            i += 1
        else:
            c.append(b[j])
            j += 1
            r += len(a) - i
    c += a[i:]
    c += b[j:]
    return c, r


n = int(input())
a = [int(x) for x in input().split()]
print(merge_sort_inversions(a)[1])

# еще не мое
def merge_sort(A):
    if len(A) <= 1:
        return A
    k = len(A)//2
    a = merge_sort(A[:k])
    b = merge_sort(A[k:])
    return merge(a, b)

def merge(A,B):
    C = []
    global r
    while A and B:
        if A[0] <= B[0]:
            C.append(A.pop(0))
        else: 
            C.append(B.pop(0))
            r = r + len(A)
    return C + A + B

r = 0
n = int(input())
array = list(map(int,input().split()))
merge_sort(array)
print(r)

# задача быстрая сортировка
#import time 
#st = time.monotonic()
import sys
n, m = map(int, sys.stdin.readline().split())#n -кол-во отрезков, m -кол-во точек
A = [list(map(int, sys.stdin.readline().split())) for i in range(n)]
t= list(map(int, sys.stdin.readline().split()))
Otvet = [0] * m

import bisect
AA = [A[i][0] for i in range(n)]
BB = [A[i][1] for i in range(n)]
AA.sort()
BB.sort()
for i in range(len(t)):
    Otvet[i] = bisect.bisect_right(AA, t[i]) - bisect.bisect_left(BB, t[i])
print(" ".join(map(str,Otvet)))
#print(time.monotonic()-st)

# задача сортировка подсчетом
import sys
n = int(input())
t= list(map(int, sys.stdin.readline().split()))
Otvet = []
B = [0]*11
for j in t:
    B[j] += 1
for i in range(len(B)):
    if B[i] != 0:
        for z in range(B[i]):
            Otvet.append(i)
print(" ".join(map(str,Otvet)))

## 
# наибольшая последовательнократная подпоследовательность

import sys
n = int(input())
A = list(map(int, sys.stdin.readline().split()))
F = [0] * len(A)
for i in range(len(A)):
    F[i] = 1
    for j in range(i):
        if A[i] % A[j] == 0 and F[j] + 1 > F[i]:
            F[i] = F[j] + 1
k = max(F)
print(k)

#  наибольшая невозрастающая подпоследовательность

import sys
n = int(input())
A = list(map(int, sys.stdin.readline().split()))
P = [0]*n
M = [0]*(n + 1)
L = 0
A = A[::-1]
for i in range(n):
    lo = 1
    hi = L
    while lo <= hi:
        mid = (lo + hi) // 2
        if A[M[mid]] <= A[i]:
            lo = mid + 1
        else:
            hi = mid - 1
    newL = lo
    P[i] = M[newL - 1]
    M[newL] = i
    if newL > L:
        L = newL
indexes = [0]*L
k = M[L]
for i in range(L-1, -1, -1):
    indexes[i] = n - k
    k = P[k]
print(L)
print(' '.join(map(str,indexes[::-1])))

# расстояние редактирования

A = input()
B = input()
F = [[ i+j if i*j == 0 else 0 for j in range(len(B)+1)] for i in range(len(A)+1)]
for i in range(1, len(A) + 1):
    for j in range(1,len(B) + 1):
        if A[i -1] == B[j - 1]:
            F[i][j] = F[i - 1][j - 1]
        else:
            F[i][j] = 1 + min(F[i-1][j], F[i][j-1], F[i-1][j-1])
print(F[len(A)][len(B)]) # вывод кол-ва изменений

for i in F:
    print(' '.join(map(str,i))) # вывод по строчно таблицы

# рюкзак динамическое прграммирование
import sys
W,n = list(map(int, sys.stdin.readline().split()))
B = list(map(int, sys.stdin.readline().split()))
M =[0] + B # вес предметов
P=M # ценность такая же что и вес
F=[[0]*(W + 1) for i in range(n + 1)] # матрица для весов предметов
for i in range(1, n + 1):
    for j in range(W + 1): # вес каждого кол-ва предметов
        if j >= M[i]: # если общ вес больше добавляемого/ i-ый берем
            F[i][j] = max(F[i-1][j], F[i-1][j-M[i]]+P[i]) #
        else: #
            F[i][j] = F[i-1][j] # i-ый не берем
print(F[n][W])

#  лестница
import sys
n= int(input()) # кол-во ступенек
B_1 = list(map(int, sys.stdin.readline().split())) # скачать значения ступенек в список
B = [0] + B_1 # ступеньки + первая = 0
M = [0] * (n+1) # массив n + 1
M[1] = B[1] # второе значение массива
for i in range(2,len(B)): #
    M[i] = max(M[i-1], M[i-2]) + B[i] # выбираем макс.значение из предыдущих знач.в массиве и + новую ступеньку
print(M[n]) # печать последнего элемента массива

# калькулятор
n = int(input())
M = [0] + [1000] * (n - 1)   # для кол-ва шагов для каждого числа
QQ = [0] * n    # для слагаемых
WW = [n] # для ответов
for i in range(1,n + 1):  # проверяем числа
    for k in (i*2,i*3,i+1): #
        if k-1 < n and M[i-1]+1 < M[k-1]: # сравнение кол-ва шагов и проверка на невыход из массива
            M[k-1] = M[i-1]+1 # обновляем если меньше
            QQ[k-1] = i # запоминаем с какого числа пришли
while n>1: # вспоминаем слагаемые
    WW.append(QQ[n-1])
    n= QQ[n-1]
print(M[-1])
WW.reverse()
print(' '.join(map(str,WW)))
